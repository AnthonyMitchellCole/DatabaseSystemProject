<!-- products.ejs -->
<% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <i class="fas fa-exclamation-triangle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- error %> <!-- This will display the error message passed from the server -->
        </div>
    </div>
<% } %>
<% if (typeof success !== 'undefined' && success) { %>
    <div class="alert alert-success d-flex align-items-center" role="alert">
        <i class="fas fa-check-circle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- success %>
        </div>
    </div>
<% } %>

<div class="bg-light-grey mb-4">
    <h1 class="mb-4 display-5">Products</h1>
    <div class="mb-3">
        <a href="/add-record?type=product" class="btn btn-success btn-smaller" data-bs-toggle="tooltip" data-bs-placement="right" title="Add new product to track inventory"><i class="fas fa-plus-circle"></i> Add New Product</a>
    </div>
</div>
<!-- Improved visual cues and list formatting -->
<table class="table table-hover table-striped rounded-table table-smaller">
    <thead class="thead-dark">
        <tr>
            <th>
                Name
                <a href="#" class="sort-link" data-sort="name" data-order="asc" data-bs-toggle="tooltip" data-bs-placement="top" title="Sort by name">
                    <i class="fa-regular fa-circle-sort"></i>
                </a>
            </th>
            <th>
                Description
                <a href="#" class="sort-link" data-sort="description" data-order="asc" data-bs-toggle="tooltip" data-bs-placement="top" title="Sort by description">
                    <i class="fa-regular fa-circle-sort"></i>
                </a>
            </th>
            <th>
                Price
                <a href="#" class="sort-link" data-sort="price" data-order="asc" data-bs-toggle="tooltip" data-bs-placement="top" title="Sort by price">
                    <i class="fa-regular fa-circle-sort"></i>
                </a>
            </th>
            <th>
                Quantity
                <a href="#" class="sort-link" data-sort="quantity" data-order="asc" data-bs-toggle="tooltip" data-bs-placement="top" title="Sort by quantity">
                    <i class="fa-regular fa-circle-sort"></i>
                </a>
            </th>
            <th>
                Category
                <a href="#" class="sort-link" data-sort="category.name" data-order="asc" data-bs-toggle="tooltip" data-bs-placement="top" title="Sort by category">
                    <i class="fa-regular fa-circle-sort"></i>
                </a>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    
    <tbody id="productsTableBody">
        <% products.forEach(product => { %>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary btn-smaller toggle-button" type="button" data-bs-toggle="collapse" data-bs-target="#transactions<%= product._id %>" aria-expanded="false" aria-controls="transactions<%= product._id %>">
                        <i class="fas fa-chevron-down" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Show/hide transactions"></i>
                    </button>
                    <span class="product-name"><%= product.name %></span>
                </td>
                <td><%= product.description %></td>
                <td>$<%= product.price.toFixed(2) %></td>
                <td><span class="transaction-quantity"><%= product.quantity %></span></td>
                <td><%= product.category ? product.category.name : 'Uncategorized' %></td>
                <td>
                    <a href="/products/edit/<%= product._id %>" class="btn btn-info btn-smaller" data-bs-toggle="tooltip" data-bs-placement="left" title="Edit this product record"><i class="fas fa-edit"></i> Edit</a>
                    <a href="#" class="btn btn-danger btn-smaller" onclick="confirmDelete('<%= product._id %>', '<%= product.name %>')" data-id="<%= product._id %>" data-bs-toggle="tooltip" data-bs-placement="right" title="Delete this product record"><i class="fas fa-trash-alt"></i> Delete</a>
                </td>
            </tr>
            <tr class="collapse" id="transactions<%= product._id %>">
                <td colspan="6" id="list">
                    <div class="card card-body">
                        <% if (product.transactions && product.transactions.length > 0) { %>
                            <div class="list-group">
                                <% product.transactions.forEach(transaction => { %>
                                    <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                                        <div class="d-flex w-100 justify-content-between">
                                            <strong class="mb-1">Transaction: <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %></strong>
                                            <small>Date: <%= moment(transaction.date).format('L LTS') %></small>
                                        </div>
                                        <p class="mb-1">Product: <%= transaction.product ? transaction.product.name : 'Product Deleted' %></p>
                                        <small>Quantity: <%= transaction.quantity %></small>
                                    </a>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <p class="text-muted mb-0">No transactions found.</p>
                        <% } %>
                    </div>
                </td>
            </tr>            
        <% }); %>        
    </tbody>
</table>

<script>
    function confirmDelete(productId, productName) {
        if (confirm(`Are you sure you want to delete ${productName}?`)) {
            fetch('/products/' + productId, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json()) // Always parse JSON to handle both success and error uniformly
            .then(data => {
                if (data.error) {
                    // Handle any errors that come through
                    console.error('Error:', data.error);
                    // alert(data.error); // Optionally replace with a more user-friendly error display method
                    // Update current page without changing URL to display the error
                    window.location.href = window.location.pathname + '?error=' + encodeURIComponent(data.error);
                } else {
                    // Redirect on successful deletion
                    window.location.href = '/products?success=' + encodeURIComponent(`${productName} deleted successfully`);
                }
            })
            .catch(err => {
                console.error('Error:', err);
                alert('Network or parsing error occurred.');
            });
        }
    }

</script>
    
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const sortLinks = document.querySelectorAll('.sort-link');

        sortLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                // Immediately hide and dispose all tooltips
                disposeTooltips();

                const sortParam = this.dataset.sort;
                const sortOrder = this.dataset.order;
                const url = `/products?sort_by=${sortParam}&order=${sortOrder}`;

                fetch(url, { headers: { 'Accept': 'application/json' } })
                    .then(response => response.json())
                    .then(data => {
                        updateTable(data.products);
                        // Toggle the sorting order for the next click
                        this.dataset.order = this.dataset.order === 'asc' ? 'desc' : 'asc';
                        // Reinitialize tooltips after updating the table
                        initializeTooltips();
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    
        function updateTable(products) {
            const tableBody = document.getElementById('productsTableBody');
            tableBody.innerHTML = ''; // Clear the table body

            products.forEach(product => {
                // Check if the product has any transactions and prepare content accordingly
                let transactionsContent = '';
                if (product.transactions && product.transactions.length > 0) {
                    transactionsContent = product.transactions.map(transaction => `
                        <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
                            <div class="d-flex w-100 justify-content-between">
                                <strong class="mb-1">Transaction: ${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}</strong>
                                <small>Date: ${moment(transaction.date).format('L LTS')}</small>
                            </div>
                            <p class="mb-1">Product: ${transaction.product ? transaction.product.name : 'Product Deleted'}</p>
                            <small>Quantity: ${transaction.quantity}</small>
                        </a>
                    `).join('');
                } else {
                    transactionsContent = '<p class="text-muted mb-0">No transactions found.</p>';
                }

                // Generate the row for the product and its transactions
                const row = `
                    <tr>
                        <td>
                            <button class="btn btn-outline-secondary btn-smaller toggle-button" type="button" data-bs-toggle="collapse" data-bs-target="#transactions${product._id}" aria-expanded="false" aria-controls="transactions${product._id}">
                                <i class="fas fa-chevron-down" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Show/hide transactions"></i>
                            </button>
                            <span class="product-name">${product.name}</span>
                        </td>
                        <td>${product.description}</td>
                        <td>$${product.price.toFixed(2)}</td>
                        <td><span class="transaction-quantity">${product.quantity}</span></td>
                        <td>${product.category ? product.category.name : 'Uncategorized'}</td>
                        <td>
                            <a href="/products/edit/${product._id}" class="btn btn-info btn-smaller" data-bs-toggle="tooltip" data-bs-placement="left" title="Edit this product record"><i class="fas fa-edit"></i> Edit</a>
                            <a href="#" class="btn btn-danger btn-smaller" onclick="confirmDelete('${product._id}', '${product.name}')" data-id="${product._id}" data-bs-toggle="tooltip" data-bs-placement="right" title="Delete this product record"><i class="fas fa-trash-alt"></i> Delete</a>
                        </td>
                    </tr>
                    <tr class="collapse" id="transactions${product._id}">
                        <td colspan="6">
                            <div class="card card-body">
                                <div class="list-group">
                                    ${transactionsContent}
                                </div>
                            </div>
                        </td>
                    </tr>
                `;
                tableBody.innerHTML += row; // Append the new row
            });
        }

        function initializeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        function disposeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                const tooltipInstance = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                if (tooltipInstance) {
                    tooltipInstance.dispose();
                }
            });
        }

    });
    </script>    
    