<!-- logs.ejs -->
<% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <i class="fas fa-exclamation-triangle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- error %>
        </div>
    </div>
<% } %>
<% if (typeof success !== 'undefined' && success) { %>
    <div class="alert alert-success d-flex align-items-center" role="alert">
        <i class="fas fa-check-circle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- success %>
        </div>
    </div>
<% } %>

<div class="container">
    <div class="bg-light-grey mb-4">
        <h1 class="mb-4 display-5">Error Logs</h1>
    </div>

    <div class="spinner-overlay" style="display: block; position: fixed; top: 0; left: 0; height: 100%; width: 100%; background: rgba(128, 128, 128, 0.5); z-index: 1050;">
        <div class="spinner" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border text-light" role="status" style="width: 3rem; height: 3rem;">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>

    <table class="table table-hover table-striped rounded-table table-sm" id="logsTable">
        <thead class="thead-dark">
            <tr>
                <th>Date</th>
                <th>Level</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody id="logsTableBody">
            <% logs.forEach(log => { %>
                <tr>
                    <td><%= log.timestamp %></td>
                    <td><%= log.level %></td>
                    <td class="message-cell" style="cursor: pointer;" data-message="<%= log.message %>"><%= log.message.substring(0, 50) %>...</td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <!-- Modal -->
    <div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered wide-modal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Full Message</h5>
                    <!-- <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button> -->
                </div>
                <div class="modal-body">
                    <pre id="errorMessage" class="code-style"></pre>
                </div>
            </div>
        </div>
    </div>    

</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

<script>
    $(document).ready(function() {
        let dataTable = $('.table').DataTable({
            "paging": true,
            "ordering": true,
            "info": true,
            "searching": true,
            "responsive": true,
            "pageLength": 25,
            "dom": 'Bfrtip',
            "buttons": [
                { extend: 'csvHtml5', text: '<i class="fas fa-file-csv"></i>', titleAttr: 'Export to CSV', className: 'btn btn-info btn-smaller' },
                { extend: 'excelHtml5', text: '<i class="fas fa-file-excel"></i>', titleAttr: 'Export to Excel', className: 'btn btn-success btn-smaller' },
                { extend: 'print', text: '<i class="fas fa-print"></i>', titleAttr: 'Print', className: 'btn btn-primary btn-smaller' }
            ],
            "initComplete": function(settings, json) {
                // Initialize Bootstrap tooltips
                $(this).find('[data-bs-toggle="tooltip"]').tooltip(); // You may need to adjust this selector depending on your HTML structure
                $('.spinner-overlay').hide();
            }
        });

         // Event handler for clicking on a message
        $('#logsTable tbody').on('click', '.message-cell', function() {
            const message = $(this).data('message');
            const date = $(this).closest('tr').find('td:first-child').text();
            const level = $(this).prev().text();
            $('#errorMessage').text(message);  // Insert message into modal
            $('.modal-title').text(`${level.toUpperCase()} - ${date}`); // Set modal title
            $('#messageModal').modal('show'); // Show the modal
        });

        // Initialize tooltips on dynamically added elements
        dataTable.buttons().container().find('.btn').attr('data-bs-toggle', 'tooltip').tooltip();
    
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const sortLinks = document.querySelectorAll('.sort-link');
    
        sortLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                disposeTooltips();
    
                const sortParam = this.dataset.sort;
                const sortOrder = this.dataset.order;
                const url = `/logs?sort_by=${sortParam}&order=${sortOrder}`;
    
                fetch(url, { headers: { 'Accept': 'application/json' } })
                    .then(response => response.json())
                    .then(data => {
                        updateTable(data.logs);
                        this.dataset.order = this.dataset.order === 'asc' ? 'desc' : 'asc';
                        initializeTooltips();
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    
        function updateTable(logs) {
            const tableBody = document.getElementById('logsTableBody');
            tableBody.innerHTML = '';

            logs.forEach(log => {
                const row = `
                    <tr>
                        <td>${log.date}</td>
                        <td>${log.level}</td>
                        <td>${log.message}</td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });
            initializeTooltips(); // Reinitialize tooltips after updating the table
        }

        function initializeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        function disposeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                const tooltipInstance = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                if (tooltipInstance) {
                    tooltipInstance.dispose();
                }
            });
        }
    });
</script>