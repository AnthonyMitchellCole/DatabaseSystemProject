<!-- logs.ejs -->
<% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <i class="fas fa-exclamation-triangle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- error %>
        </div>
    </div>
<% } %>
<% if (typeof success !== 'undefined' && success) { %>
    <div class="alert alert-success d-flex align-items-center" role="alert">
        <i class="fas fa-check-circle bi flex-shrink-0 me-2" style="font-size: 1.5rem;"></i>
        <div>
            <%- success %>
        </div>
    </div>
<% } %>

<div class="bg-light-grey mb-4">
    <h1 class="mb-4 display-5">Admin Logs</h1>
</div>

<table class="table table-hover table-striped rounded-table table-sm">
    <thead class="thead-dark">
        <tr>
            <th>Date</th>
            <th>Level</th>
            <th>Client IP</th>
            <!-- <th>RFC 1413 Identity</th> -->
            <th>Userid</th>
            <th>Timestamp</th>
            <th>Method</th>
            <th>Path</th>
            <th>Status Code</th>
            <th>Size</th>
            <th>Referer</th>
            <th>User-agent</th>
        </tr>
    </thead>
    <tbody id="logsTableBody">
        <% logs.forEach(log => { %>
            <tr>
                <td><%= log.timestamp %></td>
                <td><%= log.level %></td>
                <td><%= log.clientIp %></td> <!-- Client IP -->
                <!-- <td><%= log.rfc1413 %></td> RFC 1413 identity -->
                <td><%= log.userid %></td> <!-- Userid -->
                <td><%= log.logTimestamp %></td> <!-- Timestamp -->
                <td><%= log.method %></td> <!-- Method -->
                <td><%= log.path %></td> <!-- Path -->
                <td><%= log.statusCode %></td> <!-- Status code -->
                <td><%= log.size %></td> <!-- Size -->
                <td><%= log.referer %></td> <!-- Referer -->
                <td><%= log.userAgent %></td> <!-- User-agent -->
            </tr>
        <% }); %>
    </tbody>
</table>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const sortLinks = document.querySelectorAll('.sort-link');
    
        sortLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                disposeTooltips();
    
                const sortParam = this.dataset.sort;
                const sortOrder = this.dataset.order;
                const url = `/logs?sort_by=${sortParam}&order=${sortOrder}`;
    
                fetch(url, { headers: { 'Accept': 'application/json' } })
                    .then(response => response.json())
                    .then(data => {
                        updateTable(data.logs);
                        this.dataset.order = this.dataset.order === 'asc' ? 'desc' : 'asc';
                        initializeTooltips();
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    
        function updateTable(logs) {
            const tableBody = document.getElementById('logsTableBody');
            tableBody.innerHTML = '';

            logs.forEach(log => {
                const row = `
                    <tr>
                        <td>${log.date}</td>
                        <td>${log.level}</td>
                        <td>${log.message}</td>
                    </tr>
                `;
                tableBody.innerHTML += row;
            });
            initializeTooltips(); // Reinitialize tooltips after updating the table
        }

        function initializeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        function disposeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                const tooltipInstance = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                if (tooltipInstance) {
                    tooltipInstance.dispose();
                }
            });
        }
    });
</script>